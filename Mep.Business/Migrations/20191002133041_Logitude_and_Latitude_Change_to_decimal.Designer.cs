// <auto-generated />
using System;
using Mep.Business;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace mep.business.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20191002133041_Logitude_and_Latitude_Change_to_decimal")]
    partial class Logitude_and_Latitude_Change_to_decimal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mep.Data.Entities.BankDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("CcgId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("NameOnAccount")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("SortCode");

                    b.Property<int>("UserId");

                    b.Property<int>("VsrNumber");

                    b.HasKey("Id");

                    b.HasAlternateKey("CcgId", "UserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("Mep.Data.Entities.BankDetailAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("CcgId");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("NameOnAccount")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("SortCode");

                    b.Property<int>("UserId");

                    b.Property<int>("VsrNumber");

                    b.HasKey("AuditId");

                    b.HasAlternateKey("CcgId", "UserId");

                    b.ToTable("BankDetailsAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.Ccg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CostCentre");

                    b.Property<decimal>("FailedExamPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPaymentApprovalRequired");

                    b.Property<string>("LongCode")
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ShortCode")
                        .HasMaxLength(5);

                    b.Property<decimal>("SuccessfulPencePerMile")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnsuccessfulPencePerMile")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Ccgs");
                });

            modelBuilder.Entity("Mep.Data.Entities.CcgAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int>("CostCentre");

                    b.Property<decimal>("FailedExamPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPaymentApprovalRequired");

                    b.Property<string>("LongCode")
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ShortCode")
                        .HasMaxLength(5);

                    b.Property<decimal>("SuccessfulPencePerMile")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnsuccessfulPencePerMile")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AuditId");

                    b.ToTable("CcgsAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.ClaimStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("ClaimStatuses");
                });

            modelBuilder.Entity("Mep.Data.Entities.ClaimStatusAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("AuditId");

                    b.ToTable("ClaimStatusesAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.ContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Address2")
                        .HasMaxLength(200);

                    b.Property<string>("Address3")
                        .HasMaxLength(200);

                    b.Property<int>("CcgId");

                    b.Property<int>("ContactDetailTypeId");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Postcode")
                        .HasMaxLength(10);

                    b.Property<int?>("TelephoneNumber");

                    b.Property<string>("Town");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasAlternateKey("CcgId", "ContactDetailTypeId", "UserId");

                    b.HasIndex("ContactDetailTypeId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("Mep.Data.Entities.ContactDetailAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Address2")
                        .HasMaxLength(200);

                    b.Property<string>("Address3")
                        .HasMaxLength(200);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int>("CcgId");

                    b.Property<int>("ContactDetailTypeId");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Postcode")
                        .HasMaxLength(10);

                    b.Property<int?>("TelephoneNumber");

                    b.Property<string>("Town");

                    b.Property<int>("UserId");

                    b.HasKey("AuditId");

                    b.HasAlternateKey("CcgId", "ContactDetailTypeId", "UserId");

                    b.ToTable("ContactDetailsAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.ContactDetailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("ContactDetailTypes");
                });

            modelBuilder.Entity("Mep.Data.Entities.ContactDetailTypeAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("AuditId");

                    b.ToTable("ContactDetailTypesAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.DoctorStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("AvailabilityEnd");

                    b.Property<DateTimeOffset>("AvailabilityStart");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityEnd1");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityEnd2");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityEnd3");

                    b.Property<decimal?>("ExtendedAvailabilityLatitude1")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal?>("ExtendedAvailabilityLatitude2")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal?>("ExtendedAvailabilityLatitude3")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal?>("ExtendedAvailabilityLongitude1")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal?>("ExtendedAvailabilityLongitude2")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal?>("ExtendedAvailabilityLongitude3")
                        .HasColumnType("decimal(9,6)");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityStart1");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityStart2");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityStart3");

                    b.Property<bool>("IsActive");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("DoctorStatuses");
                });

            modelBuilder.Entity("Mep.Data.Entities.DoctorStatusAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<DateTimeOffset>("AvailabilityEnd");

                    b.Property<DateTimeOffset>("AvailabilityStart");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityEnd1");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityEnd2");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityEnd3");

                    b.Property<decimal?>("ExtendedAvailabilityLatitude1")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal?>("ExtendedAvailabilityLatitude2")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal?>("ExtendedAvailabilityLatitude3")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal?>("ExtendedAvailabilityLongitude1")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal?>("ExtendedAvailabilityLongitude2")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal?>("ExtendedAvailabilityLongitude3")
                        .HasColumnType("decimal(9,6)");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityStart1");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityStart2");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityStart3");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.HasKey("AuditId");

                    b.ToTable("DoctorStatusesAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.Examination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Address2");

                    b.Property<string>("Address3");

                    b.Property<string>("Address4");

                    b.Property<int>("CcgId");

                    b.Property<int?>("CompletedByUserId");

                    b.Property<DateTimeOffset?>("CompletedTime");

                    b.Property<int?>("CompletionConfirmationByUserId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsSuccessful");

                    b.Property<string>("MeetingArrangementComment")
                        .HasMaxLength(2000);

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("MustBeCompletedBy");

                    b.Property<int?>("NonPaymentLocationId");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("PreferredDoctorGenderTypeId");

                    b.Property<int>("ReferralId");

                    b.Property<DateTimeOffset?>("ScheduledTime");

                    b.Property<int>("SpecialityId");

                    b.Property<int?>("UnsuccessfulExaminationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CcgId");

                    b.HasIndex("CompletedByUserId");

                    b.HasIndex("CompletionConfirmationByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("NonPaymentLocationId");

                    b.HasIndex("PreferredDoctorGenderTypeId");

                    b.HasIndex("ReferralId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("UnsuccessfulExaminationTypeId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("Mep.Data.Entities.ExaminationAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Address2");

                    b.Property<string>("Address3");

                    b.Property<string>("Address4");

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int>("CcgId");

                    b.Property<int?>("CompletedByUserId");

                    b.Property<DateTimeOffset?>("CompletedTime");

                    b.Property<int?>("CompletionConfirmationByUserId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<int>("GenderTypeId");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsSuccessful");

                    b.Property<string>("MeetingArrangementComment")
                        .HasMaxLength(2000);

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("MustBeCompletedBy");

                    b.Property<int?>("NonPaymentLocationId");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("ReferralId");

                    b.Property<DateTimeOffset?>("ScheduledTime");

                    b.Property<int>("SpecialityId");

                    b.Property<int?>("UnsuccessfulExaminationTypeId");

                    b.HasKey("AuditId");

                    b.ToTable("ExaminationsAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.GenderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("GenderTypes");
                });

            modelBuilder.Entity("Mep.Data.Entities.GpPractice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CcgId");

                    b.Property<string>("GpPracticeCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CcgId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("GpPractices");
                });

            modelBuilder.Entity("Mep.Data.Entities.GpPracticeAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int>("CcgId");

                    b.Property<string>("GpPracticeCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("AuditId");

                    b.ToTable("GpPracticesAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Exception");

                    b.Property<string>("Level")
                        .HasMaxLength(128);

                    b.Property<string>("Message");

                    b.Property<string>("MessageTemplate");

                    b.Property<string>("Properties");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Mep.Data.Entities.NonPaymentLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CcgId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<int>("NonPaymentLocationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CcgId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("NonPaymentLocationTypeId");

                    b.ToTable("NonPaymentLocations");
                });

            modelBuilder.Entity("Mep.Data.Entities.NonPaymentLocationAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int>("CcgId");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<int>("NonPaymentLocationTypeId");

                    b.HasKey("AuditId");

                    b.ToTable("NonPaymentLocationsAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.NonPaymentLocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CcgId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CcgId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("NonPaymentLocationTypes");
                });

            modelBuilder.Entity("Mep.Data.Entities.NonPaymentLocationTypeAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("AuditId");

                    b.ToTable("NonPaymentLocationTypesAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.NotificationText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("NotificationTexts");
                });

            modelBuilder.Entity("Mep.Data.Entities.NotificationTextAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("AuditId");

                    b.ToTable("NotificationTextsAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.OnCallUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("DateTimeEnd");

                    b.Property<DateTimeOffset>("DateTimeStart");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("OnCallUsers");
                });

            modelBuilder.Entity("Mep.Data.Entities.OnCallUserAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<DateTimeOffset>("DateTimeEnd");

                    b.Property<DateTimeOffset>("DateTimeStart");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<int>("UserId");

                    b.HasKey("AuditId");

                    b.ToTable("OnCallUsersAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("Mep.Data.Entities.OrganisationAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("AuditId");

                    b.ToTable("OrganisationsAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternativeIdentifier")
                        .HasMaxLength(200);

                    b.Property<int?>("CcgId");

                    b.Property<int?>("GpPracticeId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<long?>("NhsNumber");

                    b.Property<string>("ResidentialPostcode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CcgId");

                    b.HasIndex("GpPracticeId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Mep.Data.Entities.PatientAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternativeIdentifier")
                        .HasMaxLength(200);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int?>("CcgId");

                    b.Property<int?>("GpPracticeId");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<long?>("NhsNumber");

                    b.Property<string>("ResidentialPostcode")
                        .HasMaxLength(10);

                    b.HasKey("AuditId");

                    b.ToTable("PatientsAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CcgId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<int>("PaymentMethodTypeId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasAlternateKey("CcgId", "PaymentMethodTypeId", "UserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PaymentMethodTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentMethodAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int>("CcgId");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<int>("PaymentMethodTypeId");

                    b.Property<int>("UserId");

                    b.HasKey("AuditId");

                    b.HasAlternateKey("CcgId", "PaymentMethodTypeId", "UserId");

                    b.ToTable("PaymentMethodsAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentMethodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("PaymentMethodTypes");
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentMethodTypeAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("AuditId");

                    b.ToTable("PaymentMethodTypesAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("PaymentRuleSetId");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PaymentRuleSetId");

                    b.ToTable("PaymentRules");
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentRuleAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("PaymentRuleSetId");

                    b.HasKey("AuditId");

                    b.ToTable("PaymentRulesAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentRuleSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CcgId");

                    b.Property<DateTimeOffset>("DateTimeFrom");

                    b.Property<DateTimeOffset>("DateTimeTo");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CcgId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("PaymentRuleSets");
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentRuleSetAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int>("CcgId");

                    b.Property<DateTimeOffset>("DateTimeFrom");

                    b.Property<DateTimeOffset>("DateTimeTo");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("AuditId");

                    b.ToTable("PaymentRuleSetsAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.ProfileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("ProfileTypes");
                });

            modelBuilder.Entity("Mep.Data.Entities.ProfileTypeAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("AuditId");

                    b.ToTable("ProfileTypesAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.Referral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPlannedExamination");

                    b.Property<int>("LeadAmhpUserId");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<int>("PatientId");

                    b.Property<int>("ReferralStatusId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LeadAmhpUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReferralStatusId");

                    b.ToTable("Referrals");
                });

            modelBuilder.Entity("Mep.Data.Entities.ReferralAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPlannedExamination");

                    b.Property<int>("LeadAmhpUserId");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<int>("PatientId");

                    b.Property<int>("ReferralStatusId");

                    b.HasKey("AuditId");

                    b.ToTable("ReferralsAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.ReferralStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("ReferralStatuses");
                });

            modelBuilder.Entity("Mep.Data.Entities.ReferralStatusAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("AuditId");

                    b.ToTable("ReferralStatusesAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.Section12ApprovalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Section12ApprovalStatuses");
                });

            modelBuilder.Entity("Mep.Data.Entities.Section12ApprovalStatusAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("AuditId");

                    b.ToTable("Section12ApprovalStatusesAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int?>("FinanceMileageSubjectiveCode");

                    b.Property<int?>("FinanceSubjectiveCode");

                    b.Property<bool>("IsActive");

                    b.Property<int>("LevelOfUrgencyTimescaleMinutes");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<decimal>("NonSection12Payment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Section12Payment")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("Mep.Data.Entities.SpecialityAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int?>("FinanceMileageSubjectiveCode");

                    b.Property<int?>("FinanceSubjectiveCode");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<int>("LevelOfUrgencyTimescaleMinutes");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<decimal>("NonSection12Payment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Section12Payment")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AuditId");

                    b.ToTable("SpecialitiesAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.UnsuccessfulExaminationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("UnsuccessfulExaminationTypes");
                });

            modelBuilder.Entity("Mep.Data.Entities.UnsuccessfulExaminationTypeAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("AuditId");

                    b.ToTable("UnsuccessfulExaminationTypesAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(256);

                    b.Property<int?>("GenderTypeId");

                    b.Property<int?>("GmcNumber");

                    b.Property<bool>("HasReadTermsAndConditions");

                    b.Property<string>("IdentityServerIdentifier")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<int>("OrganisationId");

                    b.Property<int>("ProfileTypeId");

                    b.Property<int?>("Section12ApprovalStatusId");

                    b.Property<DateTimeOffset?>("Section12ExpiryDate");

                    b.HasKey("Id");

                    b.HasIndex("GenderTypeId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("ProfileTypeId");

                    b.HasIndex("Section12ApprovalStatusId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Mep.Data.Entities.UserAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int?>("GenderTypeId");

                    b.Property<int?>("GmcNumber");

                    b.Property<bool>("HasReadTermsAndConditions");

                    b.Property<int>("Id");

                    b.Property<string>("IdentityServerIdentifier")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<int>("OrganisationId");

                    b.Property<int>("ProfileTypeId");

                    b.Property<int?>("Section12ApprovalStatusId");

                    b.Property<DateTimeOffset?>("Section12ExpiryDate");

                    b.HasKey("AuditId");

                    b.ToTable("UsersAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.UserExaminationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClaimReference");

                    b.Property<int?>("ClaimStatusId");

                    b.Property<int>("ExaminationId");

                    b.Property<decimal?>("ExaminationPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasBeenDeallocated");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAttendanceConfirmed");

                    b.Property<bool?>("IsClaimable");

                    b.Property<int?>("Mileage");

                    b.Property<decimal?>("MileagePayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("PaymentDate");

                    b.Property<int>("SelectedByUserId");

                    b.Property<string>("StartPostcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("TravelComments")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ClaimStatusId");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("SelectedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserExaminationClaims");
                });

            modelBuilder.Entity("Mep.Data.Entities.UserExaminationClaimAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int?>("ClaimReference");

                    b.Property<int?>("ClaimStatusId");

                    b.Property<int>("ExaminationId");

                    b.Property<decimal?>("ExaminationPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasBeenDeallocated");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAttendanceConfirmed");

                    b.Property<bool?>("IsClaimable");

                    b.Property<int?>("Mileage");

                    b.Property<decimal?>("MileagePayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("PaymentDate");

                    b.Property<int>("SelectedByUserId");

                    b.Property<string>("StartPostcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("TravelComments")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("UserId");

                    b.HasKey("AuditId");

                    b.ToTable("UserExaminationClaimsAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.UserExaminationNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExaminationId");

                    b.Property<bool?>("HasAccepted");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<int>("NotificationTextId");

                    b.Property<DateTimeOffset?>("RespondedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExaminationId", "UserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("NotificationTextId");

                    b.HasIndex("UserId");

                    b.ToTable("UserExaminationNotifications");
                });

            modelBuilder.Entity("Mep.Data.Entities.UserExaminationNotificationAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int>("ExaminationId");

                    b.Property<bool?>("HasAccepted");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<int>("NotificationTextId");

                    b.Property<DateTimeOffset?>("RespondedAt");

                    b.Property<int>("UserId");

                    b.HasKey("AuditId");

                    b.HasAlternateKey("ExaminationId", "UserId");

                    b.ToTable("UserExaminationNotificationsAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.UserSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<int>("SpecialityId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSpecialities");
                });

            modelBuilder.Entity("Mep.Data.Entities.UserSpecialityAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedByUserId");

                    b.Property<int>("SpecialityId");

                    b.Property<int>("UserId");

                    b.HasKey("AuditId");

                    b.ToTable("UserSpecialitiesAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.BankDetail", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany("BankDetails")
                        .HasForeignKey("CcgId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Mep.Data.Entities.User", "User")
                        .WithMany("BankDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mep.Data.Entities.Ccg", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.ClaimStatus", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.ContactDetail", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany("ContactDetails")
                        .HasForeignKey("CcgId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.ContactDetailType", "ContactDetailType")
                        .WithMany("ContactDetails")
                        .HasForeignKey("ContactDetailTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Mep.Data.Entities.User", "User")
                        .WithMany("ContactDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mep.Data.Entities.ContactDetailType", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.DoctorStatus", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany("DoctorStatuses")
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.Examination", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany("Examinations")
                        .HasForeignKey("CcgId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "CompletedByUser")
                        .WithMany("CompletedExaminations")
                        .HasForeignKey("CompletedByUserId");

                    b.HasOne("Mep.Data.Entities.User", "CompletionConfirmationByUser")
                        .WithMany("CompletionConfirmationExaminations")
                        .HasForeignKey("CompletionConfirmationByUserId");

                    b.HasOne("Mep.Data.Entities.User", "CreatedByUser")
                        .WithMany("CreatedExaminations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Mep.Data.Entities.NonPaymentLocation", "NonPaymentLocation")
                        .WithMany()
                        .HasForeignKey("NonPaymentLocationId");

                    b.HasOne("Mep.Data.Entities.GenderType", "PreferredDoctorGenderType")
                        .WithMany("Examinations")
                        .HasForeignKey("PreferredDoctorGenderTypeId");

                    b.HasOne("Mep.Data.Entities.Referral", "Referral")
                        .WithMany("Examinations")
                        .HasForeignKey("ReferralId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.Speciality", "Speciality")
                        .WithMany("Examinations")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.UnsuccessfulExaminationType", "UnsuccessfulExaminationType")
                        .WithMany("Examinations")
                        .HasForeignKey("UnsuccessfulExaminationTypeId");
                });

            modelBuilder.Entity("Mep.Data.Entities.GenderType", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.GpPractice", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany("GpPractices")
                        .HasForeignKey("CcgId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.NonPaymentLocation", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany()
                        .HasForeignKey("CcgId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Mep.Data.Entities.NonPaymentLocationType", "NonPaymentLocationType")
                        .WithMany("NonPaymentLocations")
                        .HasForeignKey("NonPaymentLocationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mep.Data.Entities.NonPaymentLocationType", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg")
                        .WithMany("NonPaymentLocationTypes")
                        .HasForeignKey("CcgId");

                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.NotificationText", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.OnCallUser", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Mep.Data.Entities.User", "User")
                        .WithMany("OnCallUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mep.Data.Entities.Organisation", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.Patient", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany("Patients")
                        .HasForeignKey("CcgId");

                    b.HasOne("Mep.Data.Entities.GpPractice", "GpPractice")
                        .WithMany("Patients")
                        .HasForeignKey("GpPracticeId");

                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentMethod", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("CcgId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Mep.Data.Entities.PaymentMethodType", "PaymentMethodType")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("PaymentMethodTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "User")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentMethodType", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentRule", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Mep.Data.Entities.PaymentRuleSet", "PaymentRuleSet")
                        .WithMany("PaymentRules")
                        .HasForeignKey("PaymentRuleSetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentRuleSet", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany("PaymentRuleSets")
                        .HasForeignKey("CcgId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.ProfileType", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.Referral", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "CreatedByUser")
                        .WithMany("Referrals")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "LeadAmhpUser")
                        .WithMany("AmhpReferrals")
                        .HasForeignKey("LeadAmhpUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Mep.Data.Entities.Patient", "Patient")
                        .WithMany("Referrals")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.ReferralStatus", "ReferralStatus")
                        .WithMany()
                        .HasForeignKey("ReferralStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mep.Data.Entities.ReferralStatus", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.Section12ApprovalStatus", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.Speciality", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.UnsuccessfulExaminationType", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.User", b =>
                {
                    b.HasOne("Mep.Data.Entities.GenderType", "GenderType")
                        .WithMany("Users")
                        .HasForeignKey("GenderTypeId");

                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Mep.Data.Entities.Organisation", "Organisation")
                        .WithMany("Users")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.ProfileType", "ProfileType")
                        .WithMany("Users")
                        .HasForeignKey("ProfileTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.Section12ApprovalStatus", "Section12ApprovalStatus")
                        .WithMany("Users")
                        .HasForeignKey("Section12ApprovalStatusId");
                });

            modelBuilder.Entity("Mep.Data.Entities.UserExaminationClaim", b =>
                {
                    b.HasOne("Mep.Data.Entities.ClaimStatus", "ClaimStatus")
                        .WithMany("UserExaminationClaims")
                        .HasForeignKey("ClaimStatusId");

                    b.HasOne("Mep.Data.Entities.Examination", "Examination")
                        .WithMany("UserExaminationClaims")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Mep.Data.Entities.User", "SelectedByUser")
                        .WithMany("UserExaminationClaimSelections")
                        .HasForeignKey("SelectedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "User")
                        .WithMany("UserExaminationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mep.Data.Entities.UserExaminationNotification", b =>
                {
                    b.HasOne("Mep.Data.Entities.Examination", "Examination")
                        .WithMany("UserExaminationNotifications")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Mep.Data.Entities.NotificationText", "NotificationText")
                        .WithMany("UserExaminationNotifications")
                        .HasForeignKey("NotificationTextId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "User")
                        .WithMany("UserExaminationNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mep.Data.Entities.UserSpeciality", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Mep.Data.Entities.Speciality", "Speciality")
                        .WithMany("UserSpecialities")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mep.Data.Entities.User", "User")
                        .WithMany("UserSpecialities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
