// <auto-generated />
using System;
using Mep.Business;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace mep.api.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190715103515_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("Mep.Data.Entities.Audit.BankDetailAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountNumber");

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("CcgAuditAuditId");

                    b.Property<int>("CcgId");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("NameOnAccount")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("SortCode");

                    b.Property<int>("UserId");

                    b.Property<int>("VsrNumber");

                    b.HasKey("AuditId");

                    b.HasAlternateKey("CcgId", "UserId");

                    b.HasIndex("CcgAuditAuditId");

                    b.ToTable("BankDetailsAudit");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.CcgAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int>("CostCentre");

                    b.Property<decimal>("FailedExamPayment");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPaymentApprovalRequired");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<decimal>("SuccessfulPencePerMile");

                    b.Property<decimal>("UnsuccessfulPencePerMile");

                    b.HasKey("AuditId");

                    b.ToTable("CcgAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.ClaimStatusAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ClaimStatusAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.ContactDetailAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Address2")
                        .HasMaxLength(200);

                    b.Property<string>("Address3")
                        .HasMaxLength(200);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int?>("CcgAuditAuditId");

                    b.Property<int>("CcgId");

                    b.Property<int>("ContactDetailTypeId");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("Latitude");

                    b.Property<int?>("Longitude");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Postcode")
                        .HasMaxLength(10);

                    b.Property<int?>("TelephoneNumber");

                    b.Property<string>("Town");

                    b.Property<int>("UserId");

                    b.HasKey("AuditId");

                    b.HasAlternateKey("CcgId", "ContactDetailTypeId", "UserId");

                    b.HasIndex("CcgAuditAuditId");

                    b.ToTable("ContactDetailAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.ContactDetailTypeAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ContactDetailTypeAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.DoctorStatusAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<DateTimeOffset>("AvailabilityEnd");

                    b.Property<DateTimeOffset>("AvailabilityStart");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityEnd1");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityEnd2");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityEnd3");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityStart1");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityStart2");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityStart3");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<int>("Latitude");

                    b.Property<int>("Longitude");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.HasKey("AuditId");

                    b.ToTable("DoctorStatusAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.ExaminationAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Address2");

                    b.Property<string>("Address3");

                    b.Property<string>("Address4");

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int?>("CcgAuditAuditId");

                    b.Property<int>("CcgId");

                    b.Property<int?>("CompletedByUserId");

                    b.Property<DateTimeOffset?>("CompletedTime");

                    b.Property<int?>("CompletionConfirmationByUserId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsSuccessful");

                    b.Property<string>("MeetingArrangementComment")
                        .HasMaxLength(2000);

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTimeOffset>("MustBeCompletedBy");

                    b.Property<int>("NonPaymentLocationId");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("ReferralId");

                    b.Property<DateTimeOffset>("ScheduledTime");

                    b.Property<int>("SpecialityTypeId");

                    b.Property<int?>("UnsuccesfulExaminationTypeId");

                    b.HasKey("AuditId");

                    b.HasIndex("CcgAuditAuditId");

                    b.ToTable("ExaminationAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.GpPracticeAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int?>("CcgAuditAuditId");

                    b.Property<int>("CcgId");

                    b.Property<string>("GpPracticeCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("AuditId");

                    b.HasIndex("CcgAuditAuditId");

                    b.ToTable("GpPracticeAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.NonPaymentLocationAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int>("CcgId");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int>("NonPaymentLocationTypeId");

                    b.HasKey("AuditId");

                    b.ToTable("NonPaymentLocationAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.NonPaymentLocationTypeAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("NonPaymentLocationTypeAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.NotificationTextAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("NotificationTextAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.OnCallUserAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<DateTimeOffset>("DateTimeEnd");

                    b.Property<DateTimeOffset>("DateTimeStart");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int>("UserId");

                    b.HasKey("AuditId");

                    b.ToTable("OnCallUserAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.OrganisationAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("OrganisationAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.PatientAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlternativeIdentifier")
                        .HasMaxLength(200);

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int?>("CcgId");

                    b.Property<int?>("GpPracticeId");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int?>("NhsNumber");

                    b.Property<string>("ResidentialPostcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("AuditId");

                    b.ToTable("PatientAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.PaymentMethodAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int>("CcgId");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int>("PaymentMethodTypeId");

                    b.Property<int>("UserId");

                    b.HasKey("AuditId");

                    b.HasAlternateKey("CcgId", "PaymentMethodTypeId", "UserId");

                    b.ToTable("PaymentMethodAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.PaymentMethodTypeAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("PaymentMethodTypeAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.PaymentRuleAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("PaymentRuleSetId");

                    b.HasKey("Id");

                    b.ToTable("PaymentRuleAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.PaymentRuleSetAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CcgId");

                    b.Property<DateTimeOffset>("DateTimeFrom");

                    b.Property<DateTimeOffset>("DateTimeTo");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("PaymentRuleSetAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.ProfileTypeAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ProfileTypeAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.ReferralAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int>("PatientId");

                    b.Property<int>("ReferralStatusId");

                    b.HasKey("AuditId");

                    b.ToTable("ReferralAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.ReferralStatusAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ReferralStatusAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.Section12ApprovalStatusAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Section12ApprovalStatusAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.SpecialityAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int?>("FinanceMileageSubjectiveCode");

                    b.Property<int?>("FinanceSubjectiveCode");

                    b.Property<bool>("IsActive");

                    b.Property<int>("LevelOfUrgencyTimescaleMinutes");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<decimal>("NonSection12Payment");

                    b.Property<decimal>("Section12Payment");

                    b.HasKey("Id");

                    b.ToTable("SpecialityAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.UnsuccessfulExaminationTypeAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("UnsuccessfulExaminationTypeAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.UserAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int?>("GmcNumber");

                    b.Property<bool>("HasReadTermsAndConditions");

                    b.Property<int>("Id");

                    b.Property<string>("IdentityServerIdentifier")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int>("OrganisationId");

                    b.Property<int>("ProfileTypeId");

                    b.Property<int?>("Section12ApprovalStatusId");

                    b.Property<DateTimeOffset?>("Section12ExpiryDate");

                    b.HasKey("AuditId");

                    b.ToTable("UserAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.UserExaminationClaimAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int?>("ClaimReference");

                    b.Property<int?>("ClaimStatusId");

                    b.Property<int>("ExaminationId");

                    b.Property<decimal?>("ExaminationPayment");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAttendanceConfirmed");

                    b.Property<bool?>("IsClaimable");

                    b.Property<int?>("Mileage");

                    b.Property<decimal?>("MileagePayment");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTimeOffset?>("PaymentDate");

                    b.Property<int>("SelectedByUserId");

                    b.Property<string>("StartPostcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("TravelComments")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("UserId");

                    b.HasKey("AuditId");

                    b.ToTable("UserExaminationClaimAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.UserExaminationNotificationAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int>("ExaminationId");

                    b.Property<bool>("HasAccepted");

                    b.Property<bool>("HasResponded");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int>("NotificationTextId");

                    b.Property<DateTimeOffset?>("ResponsedAt");

                    b.Property<int>("UserId");

                    b.HasKey("AuditId");

                    b.HasAlternateKey("ExaminationId", "UserId");

                    b.ToTable("UserExaminationNotificationAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.UserSpecialityAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuditAction");

                    b.Property<int>("AuditDuration");

                    b.Property<string>("AuditErrorMessage");

                    b.Property<int>("AuditResult");

                    b.Property<bool>("AuditSuccess");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int>("SpecialityId");

                    b.Property<int>("UserId");

                    b.HasKey("AuditId");

                    b.ToTable("UserSpecialitieAudits");
                });

            modelBuilder.Entity("Mep.Data.Entities.BankDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountNumber");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("CcgId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("NameOnAccount")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("SortCode");

                    b.Property<int>("UserId");

                    b.Property<int>("VsrNumber");

                    b.HasKey("Id");

                    b.HasAlternateKey("CcgId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("Mep.Data.Entities.Ccg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CostCentre");

                    b.Property<decimal>("FailedExamPayment");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPaymentApprovalRequired");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<decimal>("SuccessfulPencePerMile");

                    b.Property<decimal>("UnsuccessfulPencePerMile");

                    b.HasKey("Id");

                    b.ToTable("Ccgs");
                });

            modelBuilder.Entity("Mep.Data.Entities.ClaimStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ClaimStatuses");
                });

            modelBuilder.Entity("Mep.Data.Entities.ContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Address2")
                        .HasMaxLength(200);

                    b.Property<string>("Address3")
                        .HasMaxLength(200);

                    b.Property<int>("CcgId");

                    b.Property<int>("ContactDetailTypeId");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("Latitude");

                    b.Property<int?>("Longitude");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Postcode")
                        .HasMaxLength(10);

                    b.Property<int?>("TelephoneNumber");

                    b.Property<string>("Town");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasAlternateKey("CcgId", "ContactDetailTypeId", "UserId");

                    b.HasIndex("ContactDetailTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("Mep.Data.Entities.ContactDetailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ContactDetailTypes");
                });

            modelBuilder.Entity("Mep.Data.Entities.DoctorStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("AvailabilityEnd");

                    b.Property<DateTimeOffset>("AvailabilityStart");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityEnd1");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityEnd2");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityEnd3");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityStart1");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityStart2");

                    b.Property<DateTimeOffset?>("ExtendedAvailabilityStart3");

                    b.Property<bool>("IsActive");

                    b.Property<int>("Latitude");

                    b.Property<int>("Longitude");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DoctorStatuses");
                });

            modelBuilder.Entity("Mep.Data.Entities.Examination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Address2");

                    b.Property<string>("Address3");

                    b.Property<string>("Address4");

                    b.Property<int>("CcgId");

                    b.Property<int?>("CompletedByUserId");

                    b.Property<DateTimeOffset?>("CompletedTime");

                    b.Property<int?>("CompletionConfirmationByUserId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsSuccessful");

                    b.Property<string>("MeetingArrangementComment")
                        .HasMaxLength(2000);

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTimeOffset>("MustBeCompletedBy");

                    b.Property<int>("NonPaymentLocationId");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("ReferralId");

                    b.Property<DateTimeOffset>("ScheduledTime");

                    b.Property<int?>("SpecialityId");

                    b.Property<int>("SpecialityTypeId");

                    b.Property<int?>("UnsuccesfulExaminationTypeId");

                    b.Property<int?>("UnsuccessfulExaminationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CcgId");

                    b.HasIndex("CompletedByUserId");

                    b.HasIndex("CompletionConfirmationByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("NonPaymentLocationId");

                    b.HasIndex("ReferralId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("UnsuccessfulExaminationTypeId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("Mep.Data.Entities.GpPractice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CcgId");

                    b.Property<string>("GpPracticeCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CcgId");

                    b.ToTable("GpPractices");
                });

            modelBuilder.Entity("Mep.Data.Entities.NonPaymentLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CcgId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int?>("NonPaymentLocationId");

                    b.Property<int>("NonPaymentLocationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CcgId");

                    b.HasIndex("NonPaymentLocationId");

                    b.HasIndex("NonPaymentLocationTypeId");

                    b.ToTable("NonPaymentLocations");
                });

            modelBuilder.Entity("Mep.Data.Entities.NonPaymentLocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CcgId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CcgId");

                    b.ToTable("NonPaymentLocationTypes");
                });

            modelBuilder.Entity("Mep.Data.Entities.NotificationText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("NotificationTexts");
                });

            modelBuilder.Entity("Mep.Data.Entities.OnCallUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateTimeEnd");

                    b.Property<DateTimeOffset>("DateTimeStart");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OnCallUsers");
                });

            modelBuilder.Entity("Mep.Data.Entities.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("Mep.Data.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlternativeIdentifier")
                        .HasMaxLength(200);

                    b.Property<int?>("CcgId");

                    b.Property<int?>("GpPracticeId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int?>("NhsNumber");

                    b.Property<string>("ResidentialPostcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CcgId");

                    b.HasIndex("GpPracticeId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CcgId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int>("PaymentMethodTypeId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasAlternateKey("CcgId", "PaymentMethodTypeId", "UserId");

                    b.HasIndex("PaymentMethodTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentMethodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("PaymentMethodTypes");
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("PaymentRuleSetId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentRuleSetId");

                    b.ToTable("PaymentRules");
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentRuleSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CcgId");

                    b.Property<DateTimeOffset>("DateTimeFrom");

                    b.Property<DateTimeOffset>("DateTimeTo");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CcgId");

                    b.ToTable("PaymentRuleSets");
                });

            modelBuilder.Entity("Mep.Data.Entities.ProfileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ProfileTypes");
                });

            modelBuilder.Entity("Mep.Data.Entities.Referral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int>("PatientId");

                    b.Property<int>("ReferralStatusId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReferralStatusId");

                    b.ToTable("Referrals");
                });

            modelBuilder.Entity("Mep.Data.Entities.ReferralStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("ReferralStatusId");

                    b.HasKey("Id");

                    b.HasIndex("ReferralStatusId");

                    b.ToTable("ReferralStatuses");
                });

            modelBuilder.Entity("Mep.Data.Entities.Section12ApprovalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Section12ApprovalStatuses");
                });

            modelBuilder.Entity("Mep.Data.Entities.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int?>("FinanceMileageSubjectiveCode");

                    b.Property<int?>("FinanceSubjectiveCode");

                    b.Property<bool>("IsActive");

                    b.Property<int>("LevelOfUrgencyTimescaleMinutes");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<decimal>("NonSection12Payment");

                    b.Property<decimal>("Section12Payment");

                    b.HasKey("Id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("Mep.Data.Entities.UnsuccessfulExaminationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("UnsuccessfulExaminationTypes");
                });

            modelBuilder.Entity("Mep.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GmcNumber");

                    b.Property<bool>("HasReadTermsAndConditions");

                    b.Property<string>("IdentityServerIdentifier")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int>("OrganisationId");

                    b.Property<int>("ProfileTypeId");

                    b.Property<int?>("Section12ApprovalStatusId");

                    b.Property<DateTimeOffset?>("Section12ExpiryDate");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("ProfileTypeId");

                    b.HasIndex("Section12ApprovalStatusId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Mep.Data.Entities.UserExaminationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClaimReference");

                    b.Property<int?>("ClaimStatusId");

                    b.Property<int>("ExaminationId");

                    b.Property<decimal?>("ExaminationPayment");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAttendanceConfirmed");

                    b.Property<bool?>("IsClaimable");

                    b.Property<int?>("Mileage");

                    b.Property<decimal?>("MileagePayment");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTimeOffset?>("PaymentDate");

                    b.Property<int>("SelectedByUserId");

                    b.Property<string>("StartPostcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("TravelComments")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ClaimStatusId");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserExaminationClaims");
                });

            modelBuilder.Entity("Mep.Data.Entities.UserExaminationNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExaminationId");

                    b.Property<bool>("HasAccepted");

                    b.Property<bool>("HasResponded");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int>("NotificationTextId");

                    b.Property<DateTimeOffset?>("ResponsedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExaminationId", "UserId");

                    b.HasIndex("NotificationTextId");

                    b.HasIndex("UserId");

                    b.ToTable("UserExaminationNotifications");
                });

            modelBuilder.Entity("Mep.Data.Entities.UserSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("ModifiedAt");

                    b.Property<int>("ModifiedBy");

                    b.Property<int>("SpecialityId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSpecialities");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.BankDetailAudit", b =>
                {
                    b.HasOne("Mep.Data.Entities.Audit.CcgAudit")
                        .WithMany("BankDetails")
                        .HasForeignKey("CcgAuditAuditId");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.ContactDetailAudit", b =>
                {
                    b.HasOne("Mep.Data.Entities.Audit.CcgAudit")
                        .WithMany("ContactDetails")
                        .HasForeignKey("CcgAuditAuditId");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.ExaminationAudit", b =>
                {
                    b.HasOne("Mep.Data.Entities.Audit.CcgAudit")
                        .WithMany("Examinations")
                        .HasForeignKey("CcgAuditAuditId");
                });

            modelBuilder.Entity("Mep.Data.Entities.Audit.GpPracticeAudit", b =>
                {
                    b.HasOne("Mep.Data.Entities.Audit.CcgAudit")
                        .WithMany("GpPractices")
                        .HasForeignKey("CcgAuditAuditId");
                });

            modelBuilder.Entity("Mep.Data.Entities.BankDetail", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany("BankDetails")
                        .HasForeignKey("CcgId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.User", "User")
                        .WithMany("BankDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mep.Data.Entities.ContactDetail", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany("ContactDetails")
                        .HasForeignKey("CcgId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.ContactDetailType", "ContactDetailType")
                        .WithMany("ContactDetails")
                        .HasForeignKey("ContactDetailTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.User", "User")
                        .WithMany("ContactDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mep.Data.Entities.DoctorStatus", b =>
                {
                    b.HasOne("Mep.Data.Entities.User")
                        .WithMany("DoctorStatuses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Mep.Data.Entities.Examination", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany("Examinations")
                        .HasForeignKey("CcgId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.User", "CompletedByUser")
                        .WithMany("CompletedExaminations")
                        .HasForeignKey("CompletedByUserId");

                    b.HasOne("Mep.Data.Entities.User", "CompletionConfirmationByUser")
                        .WithMany("CompletionConfirmationExaminations")
                        .HasForeignKey("CompletionConfirmationByUserId");

                    b.HasOne("Mep.Data.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.NonPaymentLocation", "NonPaymentLocation")
                        .WithMany()
                        .HasForeignKey("NonPaymentLocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.Referral", "Referral")
                        .WithMany("Examinations")
                        .HasForeignKey("ReferralId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.Speciality", "Speciality")
                        .WithMany("Examinations")
                        .HasForeignKey("SpecialityId");

                    b.HasOne("Mep.Data.Entities.UnsuccessfulExaminationType", "UnsuccessfulExaminationType")
                        .WithMany("Examinations")
                        .HasForeignKey("UnsuccessfulExaminationTypeId");
                });

            modelBuilder.Entity("Mep.Data.Entities.GpPractice", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany("GpPractices")
                        .HasForeignKey("CcgId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mep.Data.Entities.NonPaymentLocation", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany()
                        .HasForeignKey("CcgId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.NonPaymentLocation")
                        .WithMany("NonPaymentLocations")
                        .HasForeignKey("NonPaymentLocationId");

                    b.HasOne("Mep.Data.Entities.NonPaymentLocationType", "NonPaymentLocationType")
                        .WithMany("NonPaymentLocations")
                        .HasForeignKey("NonPaymentLocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mep.Data.Entities.NonPaymentLocationType", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg")
                        .WithMany("NonPaymentLocationTypes")
                        .HasForeignKey("CcgId");
                });

            modelBuilder.Entity("Mep.Data.Entities.OnCallUser", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "User")
                        .WithMany("OnCallUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mep.Data.Entities.Patient", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany("Patients")
                        .HasForeignKey("CcgId");

                    b.HasOne("Mep.Data.Entities.GpPractice", "GpPractice")
                        .WithMany("Patients")
                        .HasForeignKey("GpPracticeId");
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentMethod", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("CcgId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.PaymentMethodType", "PaymentMethodType")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("PaymentMethodTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.User", "User")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentRule", b =>
                {
                    b.HasOne("Mep.Data.Entities.PaymentRuleSet", "PaymentRuleSet")
                        .WithMany("PaymentRules")
                        .HasForeignKey("PaymentRuleSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mep.Data.Entities.PaymentRuleSet", b =>
                {
                    b.HasOne("Mep.Data.Entities.Ccg", "Ccg")
                        .WithMany("PaymentRuleSets")
                        .HasForeignKey("CcgId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mep.Data.Entities.Referral", b =>
                {
                    b.HasOne("Mep.Data.Entities.User", "CreatedByUser")
                        .WithMany("Referrals")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.ReferralStatus", "ReferralStatus")
                        .WithMany()
                        .HasForeignKey("ReferralStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mep.Data.Entities.ReferralStatus", b =>
                {
                    b.HasOne("Mep.Data.Entities.ReferralStatus")
                        .WithMany("ReferralStatuses")
                        .HasForeignKey("ReferralStatusId");
                });

            modelBuilder.Entity("Mep.Data.Entities.User", b =>
                {
                    b.HasOne("Mep.Data.Entities.Organisation", "Organisation")
                        .WithMany("Users")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.ProfileType", "ProfileType")
                        .WithMany("Users")
                        .HasForeignKey("ProfileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.Section12ApprovalStatus", "Section12ApprovalStatus")
                        .WithMany("Users")
                        .HasForeignKey("Section12ApprovalStatusId");
                });

            modelBuilder.Entity("Mep.Data.Entities.UserExaminationClaim", b =>
                {
                    b.HasOne("Mep.Data.Entities.ClaimStatus", "ClaimStatus")
                        .WithMany("UserExaminationClaims")
                        .HasForeignKey("ClaimStatusId");

                    b.HasOne("Mep.Data.Entities.Examination", "Examination")
                        .WithMany("UserExaminationClaims")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.User", "User")
                        .WithMany("UserExaminationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mep.Data.Entities.UserExaminationNotification", b =>
                {
                    b.HasOne("Mep.Data.Entities.Examination", "Examination")
                        .WithMany("UserExaminationNotifications")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.NotificationText", "NotificationText")
                        .WithMany("UserExaminationNotifications")
                        .HasForeignKey("NotificationTextId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.User", "User")
                        .WithMany("UserExaminationNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mep.Data.Entities.UserSpeciality", b =>
                {
                    b.HasOne("Mep.Data.Entities.Speciality", "Speciality")
                        .WithMany("UserSpecialities")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mep.Data.Entities.User", "User")
                        .WithMany("UserSpecialities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
